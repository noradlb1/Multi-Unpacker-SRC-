<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>NIDebugger</name>
  </assembly>
  <members>
    <member name="N:LDASM_Sharp">
    </member>
    <member name="T:LDASM_Sharp.LDASM">
    </member>
    <member name="M:LDASM_Sharp.LDASM.ldasm(System.Byte[],System.Int32,System.Boolean)">
      <param name="code">
</param>
      <param name="offset">
</param>
      <param name="is64">
</param>
    </member>
    <member name="N:NonIntrusive">
    </member>
    <member name="T:NonIntrusive.NIDebugger">
      <summary>
The base debugger class. This class is responsible for all debugging actions on an executable.</summary>
    </member>
    <member name="P:NonIntrusive.NIDebugger.Process">
      <summary>
Gets the debugged process.</summary>
    </member>
    <member name="P:NonIntrusive.NIDebugger.Context">
      <summary>
Gets the context of the current thread. The current thread is determined by which thread hit the current BreakPoint</summary>
    </member>
    <member name="M:NonIntrusive.NIDebugger.GetFlag(NonIntrusive.NIContextFlag,System.Boolean@)">
      <summary>
Gets the current value of the requested flag.</summary>
      <returns>
Reference to the NIDebugger object</returns>
      <param name="flag">
The flag.</param>
      <param name="value">
Output variable that will contain the value of the flag.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SetFlag(NonIntrusive.NIContextFlag,System.Boolean)">
      <summary>
Sets the value of the requested flag.</summary>
      <returns>
Reference to the NIDebugger object</returns>
      <param name="flag">
The flag</param>
      <param name="value">
What the new value of the flag should be.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.GetRegister(NonIntrusive.NIRegister,System.UInt32@)">
      <summary>
Gets the requested register value from the current context.</summary>
      <returns>
Reference to the NIDebugger object</returns>
      <param name="reg">
The register.</param>
      <param name="value">
Output variable that will contain the requested value.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SetRegister(NonIntrusive.NIRegister,System.UInt32)">
      <summary>
Sets the requested register value for the current context.</summary>
      <returns>
Reference to the NIDebugger object</returns>
      <param name="reg">
The register.</param>
      <param name="value">
The new register value.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ReadWORD(System.UInt32,System.UInt16@)">
      <summary>
Reads a WORD value from a given address in the debugged process.</summary>
      <returns>
Reference to the NIDebugger object</returns>
      <param name="address">
The address to begin reading the WORD</param>
      <param name="value">
Output variable that will contain the requested value.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ReadData(System.UInt32,System.Int32,System.Byte[]@)">
      <summary>
Reads binary data from the debugged process, starting at a given address and reading a given amount of bytes.</summary>
      <param name="address">
The address to begin reading.</param>
      <param name="length">
The number of bytes to read.</param>
      <param name="output">
The output variable that will contain the read data.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.InjectASM(System.UInt32,System.String)">
      <summary>
Legacy method that wraps WriteHexString</summary>
      <param name="address">
The address to begin writing the data.</param>
      <param name="asmString">
The hexidecimal string representing the data to be written.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.WriteHexString(System.UInt32,System.String)">
      <summary>
Parses a hexidecimal string into its equivalent bytes and writes the data to a given address in the debugged process.</summary>
      <param name="address">
The address to begin writing the data.</param>
      <param name="hexString">
</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SearchMemory(NonIntrusive.NISearchOptions,System.UInt32[]@)">
      <summary>
Searches the memory space of the debugged process.</summary>
      <param name="opts">
The SearchOptions to be used to perform the search.</param>
      <param name="results">
The output array that will hold addresses where a match was found.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.WriteData(System.UInt32,System.Byte[])">
      <summary>
Writes data to the debugged process at a given address.</summary>
      <param name="address">
The address to write the data.</param>
      <param name="data">
The data to be written.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.WriteString(System.UInt32,System.String,System.Text.Encoding)">
      <summary>
Writes a String to a given address in the debugged process, using the specificied string encoding.</summary>
      <param name="address">
The address to write the String.</param>
      <param name="str">
The String to be written.</param>
      <param name="encode">
The encoding that should be used for the String.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ReadString(System.UInt32,System.Int32,System.Text.Encoding,System.String@)">
      <summary>
Reads a String from a given address in the debugged process, using the specificied string encoding.</summary>
      <param name="address">
The address to begin reading the String.</param>
      <param name="maxLength">
The maximum length of the String to be read.</param>
      <param name="encode">
The encoding that the String uses.</param>
      <param name="value">
The output variable that will hold the read value.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ReadDWORD(System.UInt32,System.UInt32@)">
      <summary>
Reads a DWORD value from the debugged process at a given address.</summary>
      <param name="address">
The address to begin reading the DWORD value</param>
      <param name="value">
The output variable that will hold the read value.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.WriteDWORD(System.UInt32,System.UInt32)">
      <summary>
Writes a DWORD value to the memory of a debugged process.</summary>
      <param name="address">
The address to begin writing the DWORD value.</param>
      <param name="value">
The value to be written.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ReadStackValue(System.UInt32,System.UInt32@)">
      <summary>
Helper method that simplifies reading a DWORD value from the stack.</summary>
      <param name="espOffset">
The offset based on ESP to reading.</param>
      <param name="value">
The output variable that holds the read value.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.WriteStackValue(System.UInt32,System.UInt32)">
      <summary>
Helper method that simplifies writing a value to the stack.</summary>
      <param name="espOffset">
The offset based on ESP to write.</param>
      <param name="value">
The value to be written.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.DumpProcess(NonIntrusive.NIDumpOptions)">
      <summary>
Dumps the debugged process from memory to disk.</summary>
      <param name="opts">
The DumpOptions to be used.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.InsertHook(System.UInt32,System.UInt32,System.Byte[]@)">
      <summary>
Inserts a JMP instruction at the given address which lands at the given destination.</summary>
      <param name="address">
The address to place the JMP instruction</param>
      <param name="destination">
The destination the JMP should land at.</param>
      <param name="overwrittenOpcodes">
The output variable that will contain the overwritten instructions.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.AllocateMemory(System.UInt32,System.UInt32@)">
      <summary>
Allocates memory in the debugged process.</summary>
      <param name="size">
The number of bytes to allocate.</param>
      <param name="address">
The output variable containing the address of the allocated memory.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.FindProcAddress(System.String,System.String)">
      <summary>
Finds the address for the given method inside the given module. The method requested must be exported to be found. This is equivalent to the GetProcAddress() Win32 API but takes into account ASLR by reading the export tables directly from the loaded modules within the debugged process.</summary>
      <returns>
The address of the method if it was found</returns>
      <param name="modName">
Name of the DLL that contains the function (must include extension)</param>
      <param name="method">
The method whose address is being requested.</param>
      <exception cref="System.Exception">
Target doesn't have module: + modName + loaded.</exception>
    </member>
    <member name="M:NonIntrusive.NIDebugger.Execute(NonIntrusive.NIStartupOptions)">
      <summary>
Begins the debugging process of an executable.</summary>
      <param name="opts">
The StartupOptions to be used during Execute().</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.Continue">
      <summary>
Signals that the debugged process should be resumed, and that the debugger should continue to monitor for BreakPoint hits.</summary>
    </member>
    <member name="M:NonIntrusive.NIDebugger.Terminate">
      <summary>
Terminates the debugged process.</summary>
    </member>
    <member name="M:NonIntrusive.NIDebugger.Detach">
      <summary>
Detaches the debugger from the debugged process. This is done by removing all registered BreakPoints and then resuming the debugged process.</summary>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SetBreakpoint(System.UInt32)">
      <summary>
Sets a BreakPoint at a given address in the debugged process.</summary>
      <param name="address">
The address at which a BreakPoint should be placed.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ClearBreakpoint(System.UInt32)">
      <summary>
Clears a BreakPoint that has been previously set in the debugged process.</summary>
      <param name="address">
The address at which the BreakPoint should be removed.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.GetInstrLength">
      <summary>
Gets the length of the current instruction. This is based on the current value of EIP.</summary>
      <returns>
The length (in bytes) of the current instruction.</returns>
    </member>
    <member name="M:NonIntrusive.NIDebugger.GetInstrOpcodes">
      <summary>
Gets the opcodes for the current instruction.</summary>
      <returns>
Byte array consisting of the opcodes for the current instruction.</returns>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SingleStep(System.Int32)">
      <summary>
Method that performs SingleStep X number of times.</summary>
      <param name="number">
The number of times SingleStep() should be executed</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SingleStep">
      <summary>
Performs a SingleStep operation, that is to stay it resumes the process and pauses at the very next instruction. Jumps are followed, conditional jumps are evaluated, Calls are either stepped into or over depending on StepIntoCalls value.</summary>
    </member>
    <member name="M:NonIntrusive.NIDebugger.SetProcBP(System.String,System.String)">
      <summary>
Helper method that simplifies setting a BreakPoint on a function in the debugged process. Usefull only for functions that are exported from their associated modules.</summary>
      <param name="module">
The module that holds the method.</param>
      <param name="method">
The method to set a BreakPoint on.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.ClearProcBP(System.String,System.String)">
      <summary>
Helper method that simplifies clearing a BreakPoint on a function in the debugged process. Usefull only for functions that are exported from their associated modules.</summary>
      <param name="module">
The module that holds the method.</param>
      <param name="method">
The method to clear a BreakPoint from.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.While(System.Func{System.Boolean},System.Action)">
      <summary>
This method continues to run the specifed action while the specified condition results in True</summary>
      <param name="condition">
Method to be used in determining if Action should be performed, this method MUST return a boolean value.</param>
      <param name="action">
The action delegate to be performed while Condition resolves to True</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.Until(System.Func{System.Boolean},System.Action)">
      <summary>
This method continues to run the specifed action until the specified condition results in True</summary>
      <param name="condition">
Method to be used in determining if Action should be performed, this method MUST return a boolean value.</param>
      <param name="action">
The action delegate to be performed until Condition resolves to True.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.Times(System.UInt32,System.Action)">
      <summary>
Runs a given Action count number of times.</summary>
      <param name="count">
The number of times an Action should be run.</param>
      <param name="action">
The action to be run.</param>
    </member>
    <member name="M:NonIntrusive.NIDebugger.If(System.Func{System.Boolean},System.Action)">
      <summary>
This method runs the given Action if the specified condition results in True</summary>
      <param name="condition">
Method to be used in determining if Action should be performed, this method MUST return a boolean value.</param>
      <param name="action">
The action delegate to be performed if the condition evaluates to True.</param>
    </member>
    <member name="T:NonIntrusive.NIDumpOptions">
      <summary>
Class used to specify options used when dumping the debugged process through DumpProcess()</summary>
    </member>
    <member name="T:NonIntrusive.NIContext">
      <summary>
Class representing a given thread's Context (registers and flags).</summary>
    </member>
    <member name="M:NonIntrusive.NIContext.GetFlag(NonIntrusive.NIContextFlag)">
      <param name="i">
</param>
    </member>
    <member name="M:NonIntrusive.NIContext.SetFlag(NonIntrusive.NIContextFlag,System.Boolean)">
      <param name="i">
</param>
      <param name="value">
</param>
    </member>
    <member name="M:NonIntrusive.NIContext.ToWin32Context">
    </member>
    <member name="M:NonIntrusive.NIContext.#ctor(NonIntrusive.Win32.CONTEXT)">
      <param name="ctx">
</param>
    </member>
    <member name="T:NonIntrusive.NIStartupOptions">
      <summary>
Class used to specify various startup options when calling Execute()</summary>
    </member>
    <member name="P:NonIntrusive.NIStartupOptions.executable">
      <summary>
Gets or sets the path to the executable to be run.</summary>
    </member>
    <member name="P:NonIntrusive.NIStartupOptions.commandLine">
      <summary>
Gets or sets the command line arguments.</summary>
    </member>
    <member name="P:NonIntrusive.NIStartupOptions.resumeOnCreate">
      <summary>
Gets or sets a value indicating whether the debugged process should be resumed immediately after creation, or if it should remain paused until Continue() is called.</summary>
    </member>
    <member name="P:NonIntrusive.NIStartupOptions.patchTickCount">
      <summary>
Gets or sets a value indicating whether the Win32 API call GetTickCount should be patched.</summary>
    </member>
    <member name="P:NonIntrusive.NIStartupOptions.incrementTickCount">
      <summary>
Gets or sets a value indicating whether GetTickCount should always return 1, or if it should return increasing numbers.</summary>
    </member>
    <member name="T:NonIntrusive.NIBreakPoint">
      <summary>
Class representing a BreakPoint that has been placed in the debugged process.</summary>
    </member>
    <member name="P:NonIntrusive.NIBreakPoint.bpAddress">
      <summary>
Gets or sets the address of the BreakPoint.</summary>
    </member>
    <member name="P:NonIntrusive.NIBreakPoint.originalBytes">
      <summary>
Gets or sets the original bytes that were overwritten by the BreakPoint.</summary>
    </member>
    <member name="P:NonIntrusive.NIBreakPoint.threadId">
      <summary>
Gets or sets the thread identifier. This value is populated once a BreakPoint has been hit to show which thread has hit it.</summary>
    </member>
    <member name="T:NonIntrusive.NISearchOptions">
      <summary>
Class used to determine how the method SearchMemory() functions.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.SearchString">
      <summary>
Gets or sets the search string.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.SearchBytes">
      <summary>
Gets the search bytes that were parsed from the SearchString.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.ByteMask">
      <summary>
Gets the byte mask that was determined from the SearchString.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.StartAddress">
      <summary>
Gets or sets the start address that the memory searching operation should begin.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.EndAddress">
      <summary>
Gets or sets the end address that the memory searching operation should end.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.MaxOccurs">
      <summary>
Gets or sets the maximum occurences to find before returning from the memory searching operation.</summary>
    </member>
    <member name="P:NonIntrusive.NISearchOptions.SearchImage">
      <summary>
Gets or sets a value indicating whether the memory range should be limited to the main modules image.</summary>
    </member>
    <member name="T:NonIntrusive.Win32">
    </member>
  </members>
</doc>
